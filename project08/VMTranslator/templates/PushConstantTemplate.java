// Autogenerated Jamon proxy
// C:/cygwin/home/Thea/cs498/src/project08/./VMTranslator/templates/PushConstantTemplate.jamon

package VMTranslator.templates;


@org.jamon.annotations.Template(
  signature = "5E8F65EF3D02DC19DC258FDD6819F85E",
  requiredArguments = {
    @org.jamon.annotations.Argument(name = "num", type = "Integer")})
public class PushConstantTemplate
  extends org.jamon.AbstractTemplateProxy
{
  
  public PushConstantTemplate(org.jamon.TemplateManager p_manager)
  {
     super(p_manager);
  }
  
  public PushConstantTemplate()
  {
     super("/VMTranslator/templates/PushConstantTemplate");
  }
  
  protected interface Intf
    extends org.jamon.AbstractTemplateProxy.Intf{
    
    void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    
  }
  public static class ImplData
    extends org.jamon.AbstractTemplateProxy.ImplData
  {
    // 2, 3
    public void setNum(Integer num)
    {
      // 2, 3
      m_num = num;
    }
    public Integer getNum()
    {
      return m_num;
    }
    private Integer m_num;
  }
  @Override
  protected ImplData makeImplData()
  {
    return new ImplData();
  }
  @Override @SuppressWarnings("unchecked") public ImplData getImplData()
  {
    return (ImplData) super.getImplData();
  }
  
  
  @Override
  public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class){
    try
    {
      return p_class
        .getConstructor(new Class [] { org.jamon.TemplateManager.class, ImplData.class })
        .newInstance(new Object [] { getTemplateManager(), getImplData()});
    }
    catch (RuntimeException e)
    {
      throw e;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  
  @Override
  protected org.jamon.AbstractTemplateImpl constructImpl(){
    return new PushConstantTemplateImpl(getTemplateManager(), getImplData());
  }
  public org.jamon.Renderer makeRenderer(final Integer num)
  {
    return new org.jamon.AbstractRenderer() {
      @Override
      public void renderTo(final java.io.Writer jamonWriter)
        throws java.io.IOException
      {
        render(jamonWriter, num);
      }
    };
  }
  
  public void render(final java.io.Writer jamonWriter, final Integer num)
    throws java.io.IOException
  {
    renderNoFlush(jamonWriter, num);
    jamonWriter.flush();
  }
  public void renderNoFlush(final java.io.Writer jamonWriter, final Integer num)
    throws java.io.IOException
  {
    ImplData implData = getImplData();
    implData.setNum(num);
    Intf instance = (Intf) getTemplateManager().constructImpl(this);
    instance.renderNoFlush(jamonWriter);
    reset();
  }
  
  
}
