function Main.main 2
// Compiling statements
// Do statement
// Compiling expression list
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
// Let statement
<keyword> let </keyword>
<identifier> value CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<identifier> Memory CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> peek CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
// Compiling expression list
push constant 8000
<symbol> ; </symbol>
// Do statement
// Compiling expression list
<identifier> value CAT=VAR USED=true </identifier>
call Main.convert 1
// Return statement
push constant 0
return
<keyword> int </keyword>
<identifier> value CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
function Main.convert 1
// Compiling statements
// Let statement
<keyword> let </keyword>
<identifier> loop CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
// While statement
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> loop CAT=VAR USED=true </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
// Compiling statements
// Let statement
<keyword> let </keyword>
<identifier> position CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<identifier> position CAT=VAR USED=true </identifier>
push constant 1
add
<symbol> ; </symbol>
// Let statement
<keyword> let </keyword>
<identifier> mask CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<identifier> Main CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> nextMask CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
// Compiling expression list
<identifier> mask CAT=VAR USED=true </identifier>
<symbol> ; </symbol>
// Do statement
// Compiling expression list
push constant 9000
<identifier> position CAT=VAR USED=true </identifier>
add
<identifier> mask CAT=VAR USED=true </identifier>
call Memory.poke 2
// If statement
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> position CAT=VAR USED=true </identifier>
push constant 16
gt
not
<symbol> ) </symbol>
<symbol> { </symbol>
// Compiling statements
// If statement
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> value CAT=VAR USED=true </identifier>
<identifier> mask CAT=VAR USED=true </identifier>
and
push constant 0
eq
not
<symbol> ) </symbol>
<symbol> { </symbol>
// Compiling statements
// Do statement
// Compiling expression list
push constant 8000
<identifier> position CAT=VAR USED=true </identifier>
add
push constant 1
call Memory.poke 2
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
// Compiling statements
// Do statement
// Compiling expression list
push constant 8000
<identifier> position CAT=VAR USED=true </identifier>
add
push constant 0
call Memory.poke 2
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
// Compiling statements
// Let statement
<keyword> let </keyword>
<identifier> loop CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
// Return statement
push constant 0
return
<keyword> int </keyword>
<identifier> mask CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
function Main.nextMask 1
// Compiling statements
// If statement
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> mask CAT=VAR USED=true </identifier>
push constant 0
eq
<symbol> ) </symbol>
<symbol> { </symbol>
// Compiling statements
// Return statement
push constant 1
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
// Compiling statements
// Return statement
<identifier> mask CAT=VAR USED=true </identifier>
push constant 2
call Math.multiply 2
<symbol> } </symbol>
<keyword> int </keyword>
<identifier> startAddress CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> length CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
function Main.fillMemory 3
// Compiling statements
// While statement
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> length CAT=VAR USED=true </identifier>
push constant 0
gt
<symbol> ) </symbol>
<symbol> { </symbol>
// Compiling statements
// Do statement
// Compiling expression list
<identifier> startAddress CAT=VAR USED=true </identifier>
<identifier> value CAT=VAR USED=true </identifier>
call Memory.poke 2
// Let statement
<keyword> let </keyword>
<identifier> length CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<identifier> length CAT=VAR USED=true </identifier>
push constant 1
sub
<symbol> ; </symbol>
// Let statement
<keyword> let </keyword>
<identifier> startAddress CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<identifier> startAddress CAT=VAR USED=true </identifier>
push constant 1
add
<symbol> ; </symbol>
<symbol> } </symbol>
// Return statement
push constant 0
return
