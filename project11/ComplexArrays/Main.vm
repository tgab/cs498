<class>
<keyword> class </keyword>
<identifier> Main CAT=CLASS USED=false </identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier> Array CAT=TYPE USED=true </identifier>
<identifier> a CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> b CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> c CAT=VAR USED=false </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 8 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> * </symbol>
<term>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
<symbol> - </symbol>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> Main CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> double CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<keyword> null </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test 1 - Required result: 5, Actual result:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> println CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test 2 - Required result: 40, Actual result:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> println CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test 3 - Required result: 0, Actual result:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> c CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> println CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> null </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> c CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<keyword> null </keyword>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Main CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> fill CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 33 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 77 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> + </symbol>
<term>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test 4 - Required result: 77, Actual result:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> c CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> println CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test 5 - Required result: 110, Actual result:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> b CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> println CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> double CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> a CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> a CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fill CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
<identifier> Array </identifier>
<identifier> a CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> size CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> size CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> size CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> size CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a CAT=VAR USED=true </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> size CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
