<class>
<keyword> class </keyword>
<identifier> PongGame CAT=CLASS USED=false </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier> PongGame CAT=TYPE USED=true </identifier>
<identifier> instance CAT=STATIC USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Bat CAT=TYPE USED=true </identifier>
<identifier> bat CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Ball CAT=TYPE USED=true </identifier>
<identifier> ball CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> exit CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> score CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lastWall CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> batWidth CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> PongGame CAT=TYPE USED=true </identifier>
<identifier> new CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> clearScreen CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bat CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Bat CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 230 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> batWidth CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ball CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ball CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 253 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 222 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setDestination CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 400 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> drawRectangle CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 238 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 240 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> moveCursor CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Score: 0 </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> exit CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> dispose CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> dispose CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Memory CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> deAlloc CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> newInstance CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> instance CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> PongGame CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> new CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier> PongGame CAT=TYPE USED=true </identifier>
<identifier> getInstance CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> instance CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key CAT=VAR USED=false </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit CAT=VAR USED=true </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit CAT=VAR USED=true </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> keyPressed CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> move CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 130 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setDirection CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 132 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setDirection CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 140 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit CAT=VAR USED=true </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> keyPressed CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> move CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> exit CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> moveCursor CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 27 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printString CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Game Over </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveBall CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bouncingDirection CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> batLeft CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> batRight CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> ballLeft CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> ballRight CAT=VAR USED=false </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> move CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<identifier> lastWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batLeft CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> bat CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> getLeft CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batRight CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> bat CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> getRight CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballLeft CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> getLeft CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballRight CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> getRight CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> ballRight CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> ballLeft CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit CAT=VAR USED=true </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballRight CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballLeft CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> batWidth CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setWidth CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> batWidth CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> score CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> moveCursor CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> printInt CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> score CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> bounce CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
