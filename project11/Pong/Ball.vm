<class>
<keyword> class </keyword>
<identifier> Ball CAT=CLASS USED=false </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> y CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lengthx CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> lengthy CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> d CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> straightD CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> diagonalD CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> invert CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> positivex CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> positivey CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> leftWall CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> rightWall CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> topWall CAT=FIELD USED=false </identifier>
<symbol> , </symbol>
<identifier> bottomWall CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall CAT=FIELD USED=false </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Ball CAT=TYPE USED=true </identifier>
<identifier> new CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Ax CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AleftWall CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> ArightWall CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AtopWall CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AbottomWall CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ax CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ay CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> leftWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> AleftWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> rightWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ArightWall CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> topWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> AtopWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bottomWall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> AbottomWall CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> deAlloc CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setColor CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> setColor CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen CAT=SUB USED=true </identifier>
<symbol> . </symbol>
<identifier> drawRectangle CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDestination CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> destx CAT=ARG USED=false </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> desty CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> dy CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> temp CAT=VAR USED=false </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lengthx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> destx CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lengthy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> desty CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> abs CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthx CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math CAT=VAR USED=true </identifier>
<symbol> . </symbol>
<identifier> abs CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthy CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> invert CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> temp CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> dx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> dy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> temp CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivex CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> positivex CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> d CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> dx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> straightD CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diagonalD CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> move CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> hide CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> d CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> d CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> straightD CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> d CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> diagonalD CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivey CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivex CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> leftWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> leftWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> rightWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> rightWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> topWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> topWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> bottomWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> bottomWall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> bounce CAT=SUB USED=false </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> bouncingDirection CAT=ARG USED=false </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> newx CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> newy CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> divLengthx CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> divLengthy CAT=VAR USED=false </identifier>
<symbol> , </symbol>
<identifier> factor CAT=VAR USED=false </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthx CAT=VAR USED=true </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthy CAT=VAR USED=true </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx CAT=VAR USED=true </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> factor CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> factor CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall CAT=VAR USED=true </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> factor CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx CAT=VAR USED=true </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x CAT=VAR USED=true </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx CAT=VAR USED=true </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> factor CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> setDestination CAT=SUB USED=true </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> newx CAT=VAR USED=true </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> newy CAT=VAR USED=true </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
