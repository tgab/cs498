// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Decode instruction
    And(a=instruction[15], b=instruction[12], out=a);
    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[6], out=c6);
    And(a=instruction[15], b=instruction[5], out=d1);
    And(a=instruction[15], b=instruction[4], out=d2);
    And(a=instruction[15], b=instruction[3], out=d3);
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outA);

    // Decide whether or not to load into ARegister
    Not(in=instruction[15], out=nc);
    Or(a=d1, b=nc, out=sela);

    // Define A and D registers
    ARegister(in=outA, load=sela, out=A, out[0..14]=addressM);
    DRegister(in=outALU, load=d2, out=D);
    
    // Choose whether to pass A or M to ALU
    Mux16(a=A, b=inM, sel=a, out=AM);

    // ALU logic and control bits
    ALU(x=D, y=AM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, out=outM, zr=zero, ng=neg);

    // Let pos be 1 when the output of ALU is > 0
    Or(a=neg, b=zero, out=npos);
    Not(in=npos, out=pos);

    // Decide whether to jump
    And(a=j1, b=neg, out=jum1);
    And(a=j2, b=zero, out=jum2);
    And(a=j3, b=pos, out=jum3);
    Or(a=jum1, b=jum2, out=jumi);
    Or(a=jumi, b=jum3, out=jump);

    // Set program counter
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);

    // Decide whether to write to memory
    And(a=d3, b=true, out=writeM);

    
}

